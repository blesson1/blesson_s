package Autonomus;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@Autonomous(name = "Autonomous1", group = "")
public class Autonomous1 extends LinearOpMode {

  private DcMotor motor1;
  private DcMotor motor3;
  private DcMotor motor0;
  private DcMotor motor2;
 // private DcMotor motor4;

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
  
    motor1 = hardwareMap.dcMotor.get("motor1");
    motor3 = hardwareMap.dcMotor.get("motor3");
    motor0 = hardwareMap.dcMotor.get("motor0");
    motor2 = hardwareMap.dcMotor.get("motor2");
    //motor4 = hardwareMap.dcMotor.get("motor4");
    
    waitForStart();
   
// Put initialization blocks here.

    motor0.setDirection(DcMotorSimple.Direction.REVERSE);
    motor2.setDirection(DcMotorSimple.Direction.REVERSE);
    motor0.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor3.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    motor0.setTargetPosition(2240);
    motor1.setTargetPosition(2240);
    motor2.setTargetPosition(2240);
    motor3.setTargetPosition(2240);
    motor0.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor0.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor3.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor0.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    motor1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    motor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    motor3.setMode(DcMotor.RunMode.RUN_TO_POSITION);

    
    // Put run blocks here.
    motor0.setPower(1);
    motor1.setPower(1);
    motor2.setPower(1);
    motor3.setPower(1);
    while (!(!motor0.isBusy() && !motor0.isBusy())) {
      
      telemetry.update();
       motor0.setPower(0);
    motor1.setPower(0);
    motor2.setPower(0);
    motor3.setPower(0);
    }

  
    }
  }

